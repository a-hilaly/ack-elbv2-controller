// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package rule

import (
	"context"
	"errors"
	"fmt"
	"reflect"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackcondition "github.com/aws-controllers-k8s/runtime/pkg/condition"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrequeue "github.com/aws-controllers-k8s/runtime/pkg/requeue"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go/aws"
	svcsdk "github.com/aws/aws-sdk-go/service/elbv2"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/elbv2-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &aws.JSONValue{}
	_ = &svcsdk.ELBV2{}
	_ = &svcapitypes.Rule{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
	_ = &ackcondition.NotManagedMessage
	_ = &reflect.Value{}
	_ = fmt.Sprintf("")
	_ = &ackrequeue.NoRequeue{}
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer func() {
		exit(err)
	}()
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadManyInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newListRequestPayload(r)
	if err != nil {
		return nil, err
	}
	// The ARN is guaranteed to be checked by the sdkFind method. We can safely cast it here.
	input.SetRuleArns([]*string{(*string)(r.ko.Status.ACKResourceMetadata.ARN)})
	// Unset the LoadBalancerArn field since we can't set both ListenerArn and LoadBalancerArn
	// Probably needs to be done in the code-generator. @a-hilaly.
	input.ListenerArn = nil
	var resp *svcsdk.DescribeRulesOutput
	resp, err = rm.sdkapi.DescribeRulesWithContext(ctx, input)
	rm.metrics.RecordAPICall("READ_MANY", "DescribeRules", err)
	if err != nil {
		if awsErr, ok := ackerr.AWSError(err); ok && awsErr.Code() == "RuleNotFound" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	found := false
	for _, elem := range resp.Rules {
		if elem.Actions != nil {
			f0 := []*svcapitypes.Action{}
			for _, f0iter := range elem.Actions {
				f0elem := &svcapitypes.Action{}
				if f0iter.AuthenticateCognitoConfig != nil {
					f0elemf0 := &svcapitypes.AuthenticateCognitoActionConfig{}
					if f0iter.AuthenticateCognitoConfig.AuthenticationRequestExtraParams != nil {
						f0elemf0f0 := map[string]*string{}
						for f0elemf0f0key, f0elemf0f0valiter := range f0iter.AuthenticateCognitoConfig.AuthenticationRequestExtraParams {
							var f0elemf0f0val string
							f0elemf0f0val = *f0elemf0f0valiter
							f0elemf0f0[f0elemf0f0key] = &f0elemf0f0val
						}
						f0elemf0.AuthenticationRequestExtraParams = f0elemf0f0
					}
					if f0iter.AuthenticateCognitoConfig.OnUnauthenticatedRequest != nil {
						f0elemf0.OnUnauthenticatedRequest = f0iter.AuthenticateCognitoConfig.OnUnauthenticatedRequest
					}
					if f0iter.AuthenticateCognitoConfig.Scope != nil {
						f0elemf0.Scope = f0iter.AuthenticateCognitoConfig.Scope
					}
					if f0iter.AuthenticateCognitoConfig.SessionCookieName != nil {
						f0elemf0.SessionCookieName = f0iter.AuthenticateCognitoConfig.SessionCookieName
					}
					if f0iter.AuthenticateCognitoConfig.SessionTimeout != nil {
						f0elemf0.SessionTimeout = f0iter.AuthenticateCognitoConfig.SessionTimeout
					}
					if f0iter.AuthenticateCognitoConfig.UserPoolArn != nil {
						f0elemf0.UserPoolARN = f0iter.AuthenticateCognitoConfig.UserPoolArn
					}
					if f0iter.AuthenticateCognitoConfig.UserPoolClientId != nil {
						f0elemf0.UserPoolClientID = f0iter.AuthenticateCognitoConfig.UserPoolClientId
					}
					if f0iter.AuthenticateCognitoConfig.UserPoolDomain != nil {
						f0elemf0.UserPoolDomain = f0iter.AuthenticateCognitoConfig.UserPoolDomain
					}
					f0elem.AuthenticateCognitoConfig = f0elemf0
				}
				if f0iter.AuthenticateOidcConfig != nil {
					f0elemf1 := &svcapitypes.AuthenticateOIDCActionConfig{}
					if f0iter.AuthenticateOidcConfig.AuthenticationRequestExtraParams != nil {
						f0elemf1f0 := map[string]*string{}
						for f0elemf1f0key, f0elemf1f0valiter := range f0iter.AuthenticateOidcConfig.AuthenticationRequestExtraParams {
							var f0elemf1f0val string
							f0elemf1f0val = *f0elemf1f0valiter
							f0elemf1f0[f0elemf1f0key] = &f0elemf1f0val
						}
						f0elemf1.AuthenticationRequestExtraParams = f0elemf1f0
					}
					if f0iter.AuthenticateOidcConfig.AuthorizationEndpoint != nil {
						f0elemf1.AuthorizationEndpoint = f0iter.AuthenticateOidcConfig.AuthorizationEndpoint
					}
					if f0iter.AuthenticateOidcConfig.ClientId != nil {
						f0elemf1.ClientID = f0iter.AuthenticateOidcConfig.ClientId
					}
					if f0iter.AuthenticateOidcConfig.ClientSecret != nil {
						f0elemf1.ClientSecret = f0iter.AuthenticateOidcConfig.ClientSecret
					}
					if f0iter.AuthenticateOidcConfig.Issuer != nil {
						f0elemf1.Issuer = f0iter.AuthenticateOidcConfig.Issuer
					}
					if f0iter.AuthenticateOidcConfig.OnUnauthenticatedRequest != nil {
						f0elemf1.OnUnauthenticatedRequest = f0iter.AuthenticateOidcConfig.OnUnauthenticatedRequest
					}
					if f0iter.AuthenticateOidcConfig.Scope != nil {
						f0elemf1.Scope = f0iter.AuthenticateOidcConfig.Scope
					}
					if f0iter.AuthenticateOidcConfig.SessionCookieName != nil {
						f0elemf1.SessionCookieName = f0iter.AuthenticateOidcConfig.SessionCookieName
					}
					if f0iter.AuthenticateOidcConfig.SessionTimeout != nil {
						f0elemf1.SessionTimeout = f0iter.AuthenticateOidcConfig.SessionTimeout
					}
					if f0iter.AuthenticateOidcConfig.TokenEndpoint != nil {
						f0elemf1.TokenEndpoint = f0iter.AuthenticateOidcConfig.TokenEndpoint
					}
					if f0iter.AuthenticateOidcConfig.UseExistingClientSecret != nil {
						f0elemf1.UseExistingClientSecret = f0iter.AuthenticateOidcConfig.UseExistingClientSecret
					}
					if f0iter.AuthenticateOidcConfig.UserInfoEndpoint != nil {
						f0elemf1.UserInfoEndpoint = f0iter.AuthenticateOidcConfig.UserInfoEndpoint
					}
					f0elem.AuthenticateOIDCConfig = f0elemf1
				}
				if f0iter.FixedResponseConfig != nil {
					f0elemf2 := &svcapitypes.FixedResponseActionConfig{}
					if f0iter.FixedResponseConfig.ContentType != nil {
						f0elemf2.ContentType = f0iter.FixedResponseConfig.ContentType
					}
					if f0iter.FixedResponseConfig.MessageBody != nil {
						f0elemf2.MessageBody = f0iter.FixedResponseConfig.MessageBody
					}
					if f0iter.FixedResponseConfig.StatusCode != nil {
						f0elemf2.StatusCode = f0iter.FixedResponseConfig.StatusCode
					}
					f0elem.FixedResponseConfig = f0elemf2
				}
				if f0iter.ForwardConfig != nil {
					f0elemf3 := &svcapitypes.ForwardActionConfig{}
					if f0iter.ForwardConfig.TargetGroupStickinessConfig != nil {
						f0elemf3f0 := &svcapitypes.TargetGroupStickinessConfig{}
						if f0iter.ForwardConfig.TargetGroupStickinessConfig.DurationSeconds != nil {
							f0elemf3f0.DurationSeconds = f0iter.ForwardConfig.TargetGroupStickinessConfig.DurationSeconds
						}
						if f0iter.ForwardConfig.TargetGroupStickinessConfig.Enabled != nil {
							f0elemf3f0.Enabled = f0iter.ForwardConfig.TargetGroupStickinessConfig.Enabled
						}
						f0elemf3.TargetGroupStickinessConfig = f0elemf3f0
					}
					if f0iter.ForwardConfig.TargetGroups != nil {
						f0elemf3f1 := []*svcapitypes.TargetGroupTuple{}
						for _, f0elemf3f1iter := range f0iter.ForwardConfig.TargetGroups {
							f0elemf3f1elem := &svcapitypes.TargetGroupTuple{}
							if f0elemf3f1iter.TargetGroupArn != nil {
								f0elemf3f1elem.TargetGroupARN = f0elemf3f1iter.TargetGroupArn
							}
							if f0elemf3f1iter.Weight != nil {
								f0elemf3f1elem.Weight = f0elemf3f1iter.Weight
							}
							f0elemf3f1 = append(f0elemf3f1, f0elemf3f1elem)
						}
						f0elemf3.TargetGroups = f0elemf3f1
					}
					f0elem.ForwardConfig = f0elemf3
				}
				if f0iter.Order != nil {
					f0elem.Order = f0iter.Order
				}
				if f0iter.RedirectConfig != nil {
					f0elemf5 := &svcapitypes.RedirectActionConfig{}
					if f0iter.RedirectConfig.Host != nil {
						f0elemf5.Host = f0iter.RedirectConfig.Host
					}
					if f0iter.RedirectConfig.Path != nil {
						f0elemf5.Path = f0iter.RedirectConfig.Path
					}
					if f0iter.RedirectConfig.Port != nil {
						f0elemf5.Port = f0iter.RedirectConfig.Port
					}
					if f0iter.RedirectConfig.Protocol != nil {
						f0elemf5.Protocol = f0iter.RedirectConfig.Protocol
					}
					if f0iter.RedirectConfig.Query != nil {
						f0elemf5.Query = f0iter.RedirectConfig.Query
					}
					if f0iter.RedirectConfig.StatusCode != nil {
						f0elemf5.StatusCode = f0iter.RedirectConfig.StatusCode
					}
					f0elem.RedirectConfig = f0elemf5
				}
				if f0iter.TargetGroupArn != nil {
					f0elem.TargetGroupARN = f0iter.TargetGroupArn
				}
				if f0iter.Type != nil {
					f0elem.Type = f0iter.Type
				}
				f0 = append(f0, f0elem)
			}
			ko.Spec.Actions = f0
		} else {
			ko.Spec.Actions = nil
		}
		if elem.Conditions != nil {
			f1 := []*svcapitypes.RuleCondition{}
			for _, f1iter := range elem.Conditions {
				f1elem := &svcapitypes.RuleCondition{}
				if f1iter.Field != nil {
					f1elem.Field = f1iter.Field
				}
				if f1iter.HostHeaderConfig != nil {
					f1elemf1 := &svcapitypes.HostHeaderConditionConfig{}
					if f1iter.HostHeaderConfig.Values != nil {
						f1elemf1f0 := []*string{}
						for _, f1elemf1f0iter := range f1iter.HostHeaderConfig.Values {
							var f1elemf1f0elem string
							f1elemf1f0elem = *f1elemf1f0iter
							f1elemf1f0 = append(f1elemf1f0, &f1elemf1f0elem)
						}
						f1elemf1.Values = f1elemf1f0
					}
					f1elem.HostHeaderConfig = f1elemf1
				}
				if f1iter.HttpHeaderConfig != nil {
					f1elemf2 := &svcapitypes.HTTPHeaderConditionConfig{}
					if f1iter.HttpHeaderConfig.HttpHeaderName != nil {
						f1elemf2.HTTPHeaderName = f1iter.HttpHeaderConfig.HttpHeaderName
					}
					if f1iter.HttpHeaderConfig.Values != nil {
						f1elemf2f1 := []*string{}
						for _, f1elemf2f1iter := range f1iter.HttpHeaderConfig.Values {
							var f1elemf2f1elem string
							f1elemf2f1elem = *f1elemf2f1iter
							f1elemf2f1 = append(f1elemf2f1, &f1elemf2f1elem)
						}
						f1elemf2.Values = f1elemf2f1
					}
					f1elem.HTTPHeaderConfig = f1elemf2
				}
				if f1iter.HttpRequestMethodConfig != nil {
					f1elemf3 := &svcapitypes.HTTPRequestMethodConditionConfig{}
					if f1iter.HttpRequestMethodConfig.Values != nil {
						f1elemf3f0 := []*string{}
						for _, f1elemf3f0iter := range f1iter.HttpRequestMethodConfig.Values {
							var f1elemf3f0elem string
							f1elemf3f0elem = *f1elemf3f0iter
							f1elemf3f0 = append(f1elemf3f0, &f1elemf3f0elem)
						}
						f1elemf3.Values = f1elemf3f0
					}
					f1elem.HTTPRequestMethodConfig = f1elemf3
				}
				if f1iter.PathPatternConfig != nil {
					f1elemf4 := &svcapitypes.PathPatternConditionConfig{}
					if f1iter.PathPatternConfig.Values != nil {
						f1elemf4f0 := []*string{}
						for _, f1elemf4f0iter := range f1iter.PathPatternConfig.Values {
							var f1elemf4f0elem string
							f1elemf4f0elem = *f1elemf4f0iter
							f1elemf4f0 = append(f1elemf4f0, &f1elemf4f0elem)
						}
						f1elemf4.Values = f1elemf4f0
					}
					f1elem.PathPatternConfig = f1elemf4
				}
				if f1iter.QueryStringConfig != nil {
					f1elemf5 := &svcapitypes.QueryStringConditionConfig{}
					if f1iter.QueryStringConfig.Values != nil {
						f1elemf5f0 := []*svcapitypes.QueryStringKeyValuePair{}
						for _, f1elemf5f0iter := range f1iter.QueryStringConfig.Values {
							f1elemf5f0elem := &svcapitypes.QueryStringKeyValuePair{}
							if f1elemf5f0iter.Key != nil {
								f1elemf5f0elem.Key = f1elemf5f0iter.Key
							}
							if f1elemf5f0iter.Value != nil {
								f1elemf5f0elem.Value = f1elemf5f0iter.Value
							}
							f1elemf5f0 = append(f1elemf5f0, f1elemf5f0elem)
						}
						f1elemf5.Values = f1elemf5f0
					}
					f1elem.QueryStringConfig = f1elemf5
				}
				if f1iter.SourceIpConfig != nil {
					f1elemf6 := &svcapitypes.SourceIPConditionConfig{}
					if f1iter.SourceIpConfig.Values != nil {
						f1elemf6f0 := []*string{}
						for _, f1elemf6f0iter := range f1iter.SourceIpConfig.Values {
							var f1elemf6f0elem string
							f1elemf6f0elem = *f1elemf6f0iter
							f1elemf6f0 = append(f1elemf6f0, &f1elemf6f0elem)
						}
						f1elemf6.Values = f1elemf6f0
					}
					f1elem.SourceIPConfig = f1elemf6
				}
				if f1iter.Values != nil {
					f1elemf7 := []*string{}
					for _, f1elemf7iter := range f1iter.Values {
						var f1elemf7elem string
						f1elemf7elem = *f1elemf7iter
						f1elemf7 = append(f1elemf7, &f1elemf7elem)
					}
					f1elem.Values = f1elemf7
				}
				f1 = append(f1, f1elem)
			}
			ko.Spec.Conditions = f1
		} else {
			ko.Spec.Conditions = nil
		}
		if elem.IsDefault != nil {
			ko.Status.IsDefault = elem.IsDefault
		} else {
			ko.Status.IsDefault = nil
		}
		if elem.RuleArn != nil {
			if ko.Status.ACKResourceMetadata == nil {
				ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
			}
			tmpARN := ackv1alpha1.AWSResourceName(*elem.RuleArn)
			ko.Status.ACKResourceMetadata.ARN = &tmpARN
		}
		found = true
		break
	}
	if !found {
		return nil, ackerr.NotFound
	}

	rm.setStatusDefaults(ko)
	ko.Spec.Priority = priorityFromSDK(resp.Rules[0].Priority)

	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadManyInput returns true if there are any fields
// for the ReadMany Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadManyInput(
	r *resource,
) bool {
	return rm.customCheckRequiredFieldsMissingMethod(r)
}

// newListRequestPayload returns SDK-specific struct for the HTTP request
// payload of the List API call for the resource
func (rm *resourceManager) newListRequestPayload(
	r *resource,
) (*svcsdk.DescribeRulesInput, error) {
	res := &svcsdk.DescribeRulesInput{}

	if r.ko.Spec.ListenerARN != nil {
		res.SetListenerArn(*r.ko.Spec.ListenerARN)
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.CreateRuleOutput
	_ = resp
	resp, err = rm.sdkapi.CreateRuleWithContext(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateRule", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	found := false
	for _, elem := range resp.Rules {
		if elem.Actions != nil {
			f0 := []*svcapitypes.Action{}
			for _, f0iter := range elem.Actions {
				f0elem := &svcapitypes.Action{}
				if f0iter.AuthenticateCognitoConfig != nil {
					f0elemf0 := &svcapitypes.AuthenticateCognitoActionConfig{}
					if f0iter.AuthenticateCognitoConfig.AuthenticationRequestExtraParams != nil {
						f0elemf0f0 := map[string]*string{}
						for f0elemf0f0key, f0elemf0f0valiter := range f0iter.AuthenticateCognitoConfig.AuthenticationRequestExtraParams {
							var f0elemf0f0val string
							f0elemf0f0val = *f0elemf0f0valiter
							f0elemf0f0[f0elemf0f0key] = &f0elemf0f0val
						}
						f0elemf0.AuthenticationRequestExtraParams = f0elemf0f0
					}
					if f0iter.AuthenticateCognitoConfig.OnUnauthenticatedRequest != nil {
						f0elemf0.OnUnauthenticatedRequest = f0iter.AuthenticateCognitoConfig.OnUnauthenticatedRequest
					}
					if f0iter.AuthenticateCognitoConfig.Scope != nil {
						f0elemf0.Scope = f0iter.AuthenticateCognitoConfig.Scope
					}
					if f0iter.AuthenticateCognitoConfig.SessionCookieName != nil {
						f0elemf0.SessionCookieName = f0iter.AuthenticateCognitoConfig.SessionCookieName
					}
					if f0iter.AuthenticateCognitoConfig.SessionTimeout != nil {
						f0elemf0.SessionTimeout = f0iter.AuthenticateCognitoConfig.SessionTimeout
					}
					if f0iter.AuthenticateCognitoConfig.UserPoolArn != nil {
						f0elemf0.UserPoolARN = f0iter.AuthenticateCognitoConfig.UserPoolArn
					}
					if f0iter.AuthenticateCognitoConfig.UserPoolClientId != nil {
						f0elemf0.UserPoolClientID = f0iter.AuthenticateCognitoConfig.UserPoolClientId
					}
					if f0iter.AuthenticateCognitoConfig.UserPoolDomain != nil {
						f0elemf0.UserPoolDomain = f0iter.AuthenticateCognitoConfig.UserPoolDomain
					}
					f0elem.AuthenticateCognitoConfig = f0elemf0
				}
				if f0iter.AuthenticateOidcConfig != nil {
					f0elemf1 := &svcapitypes.AuthenticateOIDCActionConfig{}
					if f0iter.AuthenticateOidcConfig.AuthenticationRequestExtraParams != nil {
						f0elemf1f0 := map[string]*string{}
						for f0elemf1f0key, f0elemf1f0valiter := range f0iter.AuthenticateOidcConfig.AuthenticationRequestExtraParams {
							var f0elemf1f0val string
							f0elemf1f0val = *f0elemf1f0valiter
							f0elemf1f0[f0elemf1f0key] = &f0elemf1f0val
						}
						f0elemf1.AuthenticationRequestExtraParams = f0elemf1f0
					}
					if f0iter.AuthenticateOidcConfig.AuthorizationEndpoint != nil {
						f0elemf1.AuthorizationEndpoint = f0iter.AuthenticateOidcConfig.AuthorizationEndpoint
					}
					if f0iter.AuthenticateOidcConfig.ClientId != nil {
						f0elemf1.ClientID = f0iter.AuthenticateOidcConfig.ClientId
					}
					if f0iter.AuthenticateOidcConfig.ClientSecret != nil {
						f0elemf1.ClientSecret = f0iter.AuthenticateOidcConfig.ClientSecret
					}
					if f0iter.AuthenticateOidcConfig.Issuer != nil {
						f0elemf1.Issuer = f0iter.AuthenticateOidcConfig.Issuer
					}
					if f0iter.AuthenticateOidcConfig.OnUnauthenticatedRequest != nil {
						f0elemf1.OnUnauthenticatedRequest = f0iter.AuthenticateOidcConfig.OnUnauthenticatedRequest
					}
					if f0iter.AuthenticateOidcConfig.Scope != nil {
						f0elemf1.Scope = f0iter.AuthenticateOidcConfig.Scope
					}
					if f0iter.AuthenticateOidcConfig.SessionCookieName != nil {
						f0elemf1.SessionCookieName = f0iter.AuthenticateOidcConfig.SessionCookieName
					}
					if f0iter.AuthenticateOidcConfig.SessionTimeout != nil {
						f0elemf1.SessionTimeout = f0iter.AuthenticateOidcConfig.SessionTimeout
					}
					if f0iter.AuthenticateOidcConfig.TokenEndpoint != nil {
						f0elemf1.TokenEndpoint = f0iter.AuthenticateOidcConfig.TokenEndpoint
					}
					if f0iter.AuthenticateOidcConfig.UseExistingClientSecret != nil {
						f0elemf1.UseExistingClientSecret = f0iter.AuthenticateOidcConfig.UseExistingClientSecret
					}
					if f0iter.AuthenticateOidcConfig.UserInfoEndpoint != nil {
						f0elemf1.UserInfoEndpoint = f0iter.AuthenticateOidcConfig.UserInfoEndpoint
					}
					f0elem.AuthenticateOIDCConfig = f0elemf1
				}
				if f0iter.FixedResponseConfig != nil {
					f0elemf2 := &svcapitypes.FixedResponseActionConfig{}
					if f0iter.FixedResponseConfig.ContentType != nil {
						f0elemf2.ContentType = f0iter.FixedResponseConfig.ContentType
					}
					if f0iter.FixedResponseConfig.MessageBody != nil {
						f0elemf2.MessageBody = f0iter.FixedResponseConfig.MessageBody
					}
					if f0iter.FixedResponseConfig.StatusCode != nil {
						f0elemf2.StatusCode = f0iter.FixedResponseConfig.StatusCode
					}
					f0elem.FixedResponseConfig = f0elemf2
				}
				if f0iter.ForwardConfig != nil {
					f0elemf3 := &svcapitypes.ForwardActionConfig{}
					if f0iter.ForwardConfig.TargetGroupStickinessConfig != nil {
						f0elemf3f0 := &svcapitypes.TargetGroupStickinessConfig{}
						if f0iter.ForwardConfig.TargetGroupStickinessConfig.DurationSeconds != nil {
							f0elemf3f0.DurationSeconds = f0iter.ForwardConfig.TargetGroupStickinessConfig.DurationSeconds
						}
						if f0iter.ForwardConfig.TargetGroupStickinessConfig.Enabled != nil {
							f0elemf3f0.Enabled = f0iter.ForwardConfig.TargetGroupStickinessConfig.Enabled
						}
						f0elemf3.TargetGroupStickinessConfig = f0elemf3f0
					}
					if f0iter.ForwardConfig.TargetGroups != nil {
						f0elemf3f1 := []*svcapitypes.TargetGroupTuple{}
						for _, f0elemf3f1iter := range f0iter.ForwardConfig.TargetGroups {
							f0elemf3f1elem := &svcapitypes.TargetGroupTuple{}
							if f0elemf3f1iter.TargetGroupArn != nil {
								f0elemf3f1elem.TargetGroupARN = f0elemf3f1iter.TargetGroupArn
							}
							if f0elemf3f1iter.Weight != nil {
								f0elemf3f1elem.Weight = f0elemf3f1iter.Weight
							}
							f0elemf3f1 = append(f0elemf3f1, f0elemf3f1elem)
						}
						f0elemf3.TargetGroups = f0elemf3f1
					}
					f0elem.ForwardConfig = f0elemf3
				}
				if f0iter.Order != nil {
					f0elem.Order = f0iter.Order
				}
				if f0iter.RedirectConfig != nil {
					f0elemf5 := &svcapitypes.RedirectActionConfig{}
					if f0iter.RedirectConfig.Host != nil {
						f0elemf5.Host = f0iter.RedirectConfig.Host
					}
					if f0iter.RedirectConfig.Path != nil {
						f0elemf5.Path = f0iter.RedirectConfig.Path
					}
					if f0iter.RedirectConfig.Port != nil {
						f0elemf5.Port = f0iter.RedirectConfig.Port
					}
					if f0iter.RedirectConfig.Protocol != nil {
						f0elemf5.Protocol = f0iter.RedirectConfig.Protocol
					}
					if f0iter.RedirectConfig.Query != nil {
						f0elemf5.Query = f0iter.RedirectConfig.Query
					}
					if f0iter.RedirectConfig.StatusCode != nil {
						f0elemf5.StatusCode = f0iter.RedirectConfig.StatusCode
					}
					f0elem.RedirectConfig = f0elemf5
				}
				if f0iter.TargetGroupArn != nil {
					f0elem.TargetGroupARN = f0iter.TargetGroupArn
				}
				if f0iter.Type != nil {
					f0elem.Type = f0iter.Type
				}
				f0 = append(f0, f0elem)
			}
			ko.Spec.Actions = f0
		} else {
			ko.Spec.Actions = nil
		}
		if elem.Conditions != nil {
			f1 := []*svcapitypes.RuleCondition{}
			for _, f1iter := range elem.Conditions {
				f1elem := &svcapitypes.RuleCondition{}
				if f1iter.Field != nil {
					f1elem.Field = f1iter.Field
				}
				if f1iter.HostHeaderConfig != nil {
					f1elemf1 := &svcapitypes.HostHeaderConditionConfig{}
					if f1iter.HostHeaderConfig.Values != nil {
						f1elemf1f0 := []*string{}
						for _, f1elemf1f0iter := range f1iter.HostHeaderConfig.Values {
							var f1elemf1f0elem string
							f1elemf1f0elem = *f1elemf1f0iter
							f1elemf1f0 = append(f1elemf1f0, &f1elemf1f0elem)
						}
						f1elemf1.Values = f1elemf1f0
					}
					f1elem.HostHeaderConfig = f1elemf1
				}
				if f1iter.HttpHeaderConfig != nil {
					f1elemf2 := &svcapitypes.HTTPHeaderConditionConfig{}
					if f1iter.HttpHeaderConfig.HttpHeaderName != nil {
						f1elemf2.HTTPHeaderName = f1iter.HttpHeaderConfig.HttpHeaderName
					}
					if f1iter.HttpHeaderConfig.Values != nil {
						f1elemf2f1 := []*string{}
						for _, f1elemf2f1iter := range f1iter.HttpHeaderConfig.Values {
							var f1elemf2f1elem string
							f1elemf2f1elem = *f1elemf2f1iter
							f1elemf2f1 = append(f1elemf2f1, &f1elemf2f1elem)
						}
						f1elemf2.Values = f1elemf2f1
					}
					f1elem.HTTPHeaderConfig = f1elemf2
				}
				if f1iter.HttpRequestMethodConfig != nil {
					f1elemf3 := &svcapitypes.HTTPRequestMethodConditionConfig{}
					if f1iter.HttpRequestMethodConfig.Values != nil {
						f1elemf3f0 := []*string{}
						for _, f1elemf3f0iter := range f1iter.HttpRequestMethodConfig.Values {
							var f1elemf3f0elem string
							f1elemf3f0elem = *f1elemf3f0iter
							f1elemf3f0 = append(f1elemf3f0, &f1elemf3f0elem)
						}
						f1elemf3.Values = f1elemf3f0
					}
					f1elem.HTTPRequestMethodConfig = f1elemf3
				}
				if f1iter.PathPatternConfig != nil {
					f1elemf4 := &svcapitypes.PathPatternConditionConfig{}
					if f1iter.PathPatternConfig.Values != nil {
						f1elemf4f0 := []*string{}
						for _, f1elemf4f0iter := range f1iter.PathPatternConfig.Values {
							var f1elemf4f0elem string
							f1elemf4f0elem = *f1elemf4f0iter
							f1elemf4f0 = append(f1elemf4f0, &f1elemf4f0elem)
						}
						f1elemf4.Values = f1elemf4f0
					}
					f1elem.PathPatternConfig = f1elemf4
				}
				if f1iter.QueryStringConfig != nil {
					f1elemf5 := &svcapitypes.QueryStringConditionConfig{}
					if f1iter.QueryStringConfig.Values != nil {
						f1elemf5f0 := []*svcapitypes.QueryStringKeyValuePair{}
						for _, f1elemf5f0iter := range f1iter.QueryStringConfig.Values {
							f1elemf5f0elem := &svcapitypes.QueryStringKeyValuePair{}
							if f1elemf5f0iter.Key != nil {
								f1elemf5f0elem.Key = f1elemf5f0iter.Key
							}
							if f1elemf5f0iter.Value != nil {
								f1elemf5f0elem.Value = f1elemf5f0iter.Value
							}
							f1elemf5f0 = append(f1elemf5f0, f1elemf5f0elem)
						}
						f1elemf5.Values = f1elemf5f0
					}
					f1elem.QueryStringConfig = f1elemf5
				}
				if f1iter.SourceIpConfig != nil {
					f1elemf6 := &svcapitypes.SourceIPConditionConfig{}
					if f1iter.SourceIpConfig.Values != nil {
						f1elemf6f0 := []*string{}
						for _, f1elemf6f0iter := range f1iter.SourceIpConfig.Values {
							var f1elemf6f0elem string
							f1elemf6f0elem = *f1elemf6f0iter
							f1elemf6f0 = append(f1elemf6f0, &f1elemf6f0elem)
						}
						f1elemf6.Values = f1elemf6f0
					}
					f1elem.SourceIPConfig = f1elemf6
				}
				if f1iter.Values != nil {
					f1elemf7 := []*string{}
					for _, f1elemf7iter := range f1iter.Values {
						var f1elemf7elem string
						f1elemf7elem = *f1elemf7iter
						f1elemf7 = append(f1elemf7, &f1elemf7elem)
					}
					f1elem.Values = f1elemf7
				}
				f1 = append(f1, f1elem)
			}
			ko.Spec.Conditions = f1
		} else {
			ko.Spec.Conditions = nil
		}
		if elem.IsDefault != nil {
			ko.Status.IsDefault = elem.IsDefault
		} else {
			ko.Status.IsDefault = nil
		}
		if elem.RuleArn != nil {
			if ko.Status.ACKResourceMetadata == nil {
				ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
			}
			tmpARN := ackv1alpha1.AWSResourceName(*elem.RuleArn)
			ko.Status.ACKResourceMetadata.ARN = &tmpARN
		}
		found = true
		break
	}
	if !found {
		return nil, ackerr.NotFound
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateRuleInput, error) {
	res := &svcsdk.CreateRuleInput{}

	if r.ko.Spec.Actions != nil {
		f0 := []*svcsdk.Action{}
		for _, f0iter := range r.ko.Spec.Actions {
			f0elem := &svcsdk.Action{}
			if f0iter.AuthenticateCognitoConfig != nil {
				f0elemf0 := &svcsdk.AuthenticateCognitoActionConfig{}
				if f0iter.AuthenticateCognitoConfig.AuthenticationRequestExtraParams != nil {
					f0elemf0f0 := map[string]*string{}
					for f0elemf0f0key, f0elemf0f0valiter := range f0iter.AuthenticateCognitoConfig.AuthenticationRequestExtraParams {
						var f0elemf0f0val string
						f0elemf0f0val = *f0elemf0f0valiter
						f0elemf0f0[f0elemf0f0key] = &f0elemf0f0val
					}
					f0elemf0.SetAuthenticationRequestExtraParams(f0elemf0f0)
				}
				if f0iter.AuthenticateCognitoConfig.OnUnauthenticatedRequest != nil {
					f0elemf0.SetOnUnauthenticatedRequest(*f0iter.AuthenticateCognitoConfig.OnUnauthenticatedRequest)
				}
				if f0iter.AuthenticateCognitoConfig.Scope != nil {
					f0elemf0.SetScope(*f0iter.AuthenticateCognitoConfig.Scope)
				}
				if f0iter.AuthenticateCognitoConfig.SessionCookieName != nil {
					f0elemf0.SetSessionCookieName(*f0iter.AuthenticateCognitoConfig.SessionCookieName)
				}
				if f0iter.AuthenticateCognitoConfig.SessionTimeout != nil {
					f0elemf0.SetSessionTimeout(*f0iter.AuthenticateCognitoConfig.SessionTimeout)
				}
				if f0iter.AuthenticateCognitoConfig.UserPoolARN != nil {
					f0elemf0.SetUserPoolArn(*f0iter.AuthenticateCognitoConfig.UserPoolARN)
				}
				if f0iter.AuthenticateCognitoConfig.UserPoolClientID != nil {
					f0elemf0.SetUserPoolClientId(*f0iter.AuthenticateCognitoConfig.UserPoolClientID)
				}
				if f0iter.AuthenticateCognitoConfig.UserPoolDomain != nil {
					f0elemf0.SetUserPoolDomain(*f0iter.AuthenticateCognitoConfig.UserPoolDomain)
				}
				f0elem.SetAuthenticateCognitoConfig(f0elemf0)
			}
			if f0iter.AuthenticateOIDCConfig != nil {
				f0elemf1 := &svcsdk.AuthenticateOidcActionConfig{}
				if f0iter.AuthenticateOIDCConfig.AuthenticationRequestExtraParams != nil {
					f0elemf1f0 := map[string]*string{}
					for f0elemf1f0key, f0elemf1f0valiter := range f0iter.AuthenticateOIDCConfig.AuthenticationRequestExtraParams {
						var f0elemf1f0val string
						f0elemf1f0val = *f0elemf1f0valiter
						f0elemf1f0[f0elemf1f0key] = &f0elemf1f0val
					}
					f0elemf1.SetAuthenticationRequestExtraParams(f0elemf1f0)
				}
				if f0iter.AuthenticateOIDCConfig.AuthorizationEndpoint != nil {
					f0elemf1.SetAuthorizationEndpoint(*f0iter.AuthenticateOIDCConfig.AuthorizationEndpoint)
				}
				if f0iter.AuthenticateOIDCConfig.ClientID != nil {
					f0elemf1.SetClientId(*f0iter.AuthenticateOIDCConfig.ClientID)
				}
				if f0iter.AuthenticateOIDCConfig.ClientSecret != nil {
					f0elemf1.SetClientSecret(*f0iter.AuthenticateOIDCConfig.ClientSecret)
				}
				if f0iter.AuthenticateOIDCConfig.Issuer != nil {
					f0elemf1.SetIssuer(*f0iter.AuthenticateOIDCConfig.Issuer)
				}
				if f0iter.AuthenticateOIDCConfig.OnUnauthenticatedRequest != nil {
					f0elemf1.SetOnUnauthenticatedRequest(*f0iter.AuthenticateOIDCConfig.OnUnauthenticatedRequest)
				}
				if f0iter.AuthenticateOIDCConfig.Scope != nil {
					f0elemf1.SetScope(*f0iter.AuthenticateOIDCConfig.Scope)
				}
				if f0iter.AuthenticateOIDCConfig.SessionCookieName != nil {
					f0elemf1.SetSessionCookieName(*f0iter.AuthenticateOIDCConfig.SessionCookieName)
				}
				if f0iter.AuthenticateOIDCConfig.SessionTimeout != nil {
					f0elemf1.SetSessionTimeout(*f0iter.AuthenticateOIDCConfig.SessionTimeout)
				}
				if f0iter.AuthenticateOIDCConfig.TokenEndpoint != nil {
					f0elemf1.SetTokenEndpoint(*f0iter.AuthenticateOIDCConfig.TokenEndpoint)
				}
				if f0iter.AuthenticateOIDCConfig.UseExistingClientSecret != nil {
					f0elemf1.SetUseExistingClientSecret(*f0iter.AuthenticateOIDCConfig.UseExistingClientSecret)
				}
				if f0iter.AuthenticateOIDCConfig.UserInfoEndpoint != nil {
					f0elemf1.SetUserInfoEndpoint(*f0iter.AuthenticateOIDCConfig.UserInfoEndpoint)
				}
				f0elem.SetAuthenticateOidcConfig(f0elemf1)
			}
			if f0iter.FixedResponseConfig != nil {
				f0elemf2 := &svcsdk.FixedResponseActionConfig{}
				if f0iter.FixedResponseConfig.ContentType != nil {
					f0elemf2.SetContentType(*f0iter.FixedResponseConfig.ContentType)
				}
				if f0iter.FixedResponseConfig.MessageBody != nil {
					f0elemf2.SetMessageBody(*f0iter.FixedResponseConfig.MessageBody)
				}
				if f0iter.FixedResponseConfig.StatusCode != nil {
					f0elemf2.SetStatusCode(*f0iter.FixedResponseConfig.StatusCode)
				}
				f0elem.SetFixedResponseConfig(f0elemf2)
			}
			if f0iter.ForwardConfig != nil {
				f0elemf3 := &svcsdk.ForwardActionConfig{}
				if f0iter.ForwardConfig.TargetGroupStickinessConfig != nil {
					f0elemf3f0 := &svcsdk.TargetGroupStickinessConfig{}
					if f0iter.ForwardConfig.TargetGroupStickinessConfig.DurationSeconds != nil {
						f0elemf3f0.SetDurationSeconds(*f0iter.ForwardConfig.TargetGroupStickinessConfig.DurationSeconds)
					}
					if f0iter.ForwardConfig.TargetGroupStickinessConfig.Enabled != nil {
						f0elemf3f0.SetEnabled(*f0iter.ForwardConfig.TargetGroupStickinessConfig.Enabled)
					}
					f0elemf3.SetTargetGroupStickinessConfig(f0elemf3f0)
				}
				if f0iter.ForwardConfig.TargetGroups != nil {
					f0elemf3f1 := []*svcsdk.TargetGroupTuple{}
					for _, f0elemf3f1iter := range f0iter.ForwardConfig.TargetGroups {
						f0elemf3f1elem := &svcsdk.TargetGroupTuple{}
						if f0elemf3f1iter.TargetGroupARN != nil {
							f0elemf3f1elem.SetTargetGroupArn(*f0elemf3f1iter.TargetGroupARN)
						}
						if f0elemf3f1iter.Weight != nil {
							f0elemf3f1elem.SetWeight(*f0elemf3f1iter.Weight)
						}
						f0elemf3f1 = append(f0elemf3f1, f0elemf3f1elem)
					}
					f0elemf3.SetTargetGroups(f0elemf3f1)
				}
				f0elem.SetForwardConfig(f0elemf3)
			}
			if f0iter.Order != nil {
				f0elem.SetOrder(*f0iter.Order)
			}
			if f0iter.RedirectConfig != nil {
				f0elemf5 := &svcsdk.RedirectActionConfig{}
				if f0iter.RedirectConfig.Host != nil {
					f0elemf5.SetHost(*f0iter.RedirectConfig.Host)
				}
				if f0iter.RedirectConfig.Path != nil {
					f0elemf5.SetPath(*f0iter.RedirectConfig.Path)
				}
				if f0iter.RedirectConfig.Port != nil {
					f0elemf5.SetPort(*f0iter.RedirectConfig.Port)
				}
				if f0iter.RedirectConfig.Protocol != nil {
					f0elemf5.SetProtocol(*f0iter.RedirectConfig.Protocol)
				}
				if f0iter.RedirectConfig.Query != nil {
					f0elemf5.SetQuery(*f0iter.RedirectConfig.Query)
				}
				if f0iter.RedirectConfig.StatusCode != nil {
					f0elemf5.SetStatusCode(*f0iter.RedirectConfig.StatusCode)
				}
				f0elem.SetRedirectConfig(f0elemf5)
			}
			if f0iter.TargetGroupARN != nil {
				f0elem.SetTargetGroupArn(*f0iter.TargetGroupARN)
			}
			if f0iter.Type != nil {
				f0elem.SetType(*f0iter.Type)
			}
			f0 = append(f0, f0elem)
		}
		res.SetActions(f0)
	}
	if r.ko.Spec.Conditions != nil {
		f1 := []*svcsdk.RuleCondition{}
		for _, f1iter := range r.ko.Spec.Conditions {
			f1elem := &svcsdk.RuleCondition{}
			if f1iter.Field != nil {
				f1elem.SetField(*f1iter.Field)
			}
			if f1iter.HostHeaderConfig != nil {
				f1elemf1 := &svcsdk.HostHeaderConditionConfig{}
				if f1iter.HostHeaderConfig.Values != nil {
					f1elemf1f0 := []*string{}
					for _, f1elemf1f0iter := range f1iter.HostHeaderConfig.Values {
						var f1elemf1f0elem string
						f1elemf1f0elem = *f1elemf1f0iter
						f1elemf1f0 = append(f1elemf1f0, &f1elemf1f0elem)
					}
					f1elemf1.SetValues(f1elemf1f0)
				}
				f1elem.SetHostHeaderConfig(f1elemf1)
			}
			if f1iter.HTTPHeaderConfig != nil {
				f1elemf2 := &svcsdk.HttpHeaderConditionConfig{}
				if f1iter.HTTPHeaderConfig.HTTPHeaderName != nil {
					f1elemf2.SetHttpHeaderName(*f1iter.HTTPHeaderConfig.HTTPHeaderName)
				}
				if f1iter.HTTPHeaderConfig.Values != nil {
					f1elemf2f1 := []*string{}
					for _, f1elemf2f1iter := range f1iter.HTTPHeaderConfig.Values {
						var f1elemf2f1elem string
						f1elemf2f1elem = *f1elemf2f1iter
						f1elemf2f1 = append(f1elemf2f1, &f1elemf2f1elem)
					}
					f1elemf2.SetValues(f1elemf2f1)
				}
				f1elem.SetHttpHeaderConfig(f1elemf2)
			}
			if f1iter.HTTPRequestMethodConfig != nil {
				f1elemf3 := &svcsdk.HttpRequestMethodConditionConfig{}
				if f1iter.HTTPRequestMethodConfig.Values != nil {
					f1elemf3f0 := []*string{}
					for _, f1elemf3f0iter := range f1iter.HTTPRequestMethodConfig.Values {
						var f1elemf3f0elem string
						f1elemf3f0elem = *f1elemf3f0iter
						f1elemf3f0 = append(f1elemf3f0, &f1elemf3f0elem)
					}
					f1elemf3.SetValues(f1elemf3f0)
				}
				f1elem.SetHttpRequestMethodConfig(f1elemf3)
			}
			if f1iter.PathPatternConfig != nil {
				f1elemf4 := &svcsdk.PathPatternConditionConfig{}
				if f1iter.PathPatternConfig.Values != nil {
					f1elemf4f0 := []*string{}
					for _, f1elemf4f0iter := range f1iter.PathPatternConfig.Values {
						var f1elemf4f0elem string
						f1elemf4f0elem = *f1elemf4f0iter
						f1elemf4f0 = append(f1elemf4f0, &f1elemf4f0elem)
					}
					f1elemf4.SetValues(f1elemf4f0)
				}
				f1elem.SetPathPatternConfig(f1elemf4)
			}
			if f1iter.QueryStringConfig != nil {
				f1elemf5 := &svcsdk.QueryStringConditionConfig{}
				if f1iter.QueryStringConfig.Values != nil {
					f1elemf5f0 := []*svcsdk.QueryStringKeyValuePair{}
					for _, f1elemf5f0iter := range f1iter.QueryStringConfig.Values {
						f1elemf5f0elem := &svcsdk.QueryStringKeyValuePair{}
						if f1elemf5f0iter.Key != nil {
							f1elemf5f0elem.SetKey(*f1elemf5f0iter.Key)
						}
						if f1elemf5f0iter.Value != nil {
							f1elemf5f0elem.SetValue(*f1elemf5f0iter.Value)
						}
						f1elemf5f0 = append(f1elemf5f0, f1elemf5f0elem)
					}
					f1elemf5.SetValues(f1elemf5f0)
				}
				f1elem.SetQueryStringConfig(f1elemf5)
			}
			if f1iter.SourceIPConfig != nil {
				f1elemf6 := &svcsdk.SourceIpConditionConfig{}
				if f1iter.SourceIPConfig.Values != nil {
					f1elemf6f0 := []*string{}
					for _, f1elemf6f0iter := range f1iter.SourceIPConfig.Values {
						var f1elemf6f0elem string
						f1elemf6f0elem = *f1elemf6f0iter
						f1elemf6f0 = append(f1elemf6f0, &f1elemf6f0elem)
					}
					f1elemf6.SetValues(f1elemf6f0)
				}
				f1elem.SetSourceIpConfig(f1elemf6)
			}
			if f1iter.Values != nil {
				f1elemf7 := []*string{}
				for _, f1elemf7iter := range f1iter.Values {
					var f1elemf7elem string
					f1elemf7elem = *f1elemf7iter
					f1elemf7 = append(f1elemf7, &f1elemf7elem)
				}
				f1elem.SetValues(f1elemf7)
			}
			f1 = append(f1, f1elem)
		}
		res.SetConditions(f1)
	}
	if r.ko.Spec.ListenerARN != nil {
		res.SetListenerArn(*r.ko.Spec.ListenerARN)
	}
	if r.ko.Spec.Priority != nil {
		res.SetPriority(*r.ko.Spec.Priority)
	}
	if r.ko.Spec.Tags != nil {
		f4 := []*svcsdk.Tag{}
		for _, f4iter := range r.ko.Spec.Tags {
			f4elem := &svcsdk.Tag{}
			if f4iter.Key != nil {
				f4elem.SetKey(*f4iter.Key)
			}
			if f4iter.Value != nil {
				f4elem.SetValue(*f4iter.Value)
			}
			f4 = append(f4, f4elem)
		}
		res.SetTags(f4)
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (updated *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkUpdate")
	defer func() {
		exit(err)
	}()
	if delta.DifferentAt("Spec.Priority") {
		if err = rm.setRulePriority(ctx, desired); err != nil {
			return nil, err
		}
	} else if !delta.DifferentExcept("Spec.Priority") {
		return desired, nil
	}

	input, err := rm.newUpdateRequestPayload(ctx, desired, delta)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.ModifyRuleOutput
	_ = resp
	resp, err = rm.sdkapi.ModifyRuleWithContext(ctx, input)
	rm.metrics.RecordAPICall("UPDATE", "ModifyRule", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	found := false
	for _, elem := range resp.Rules {
		if elem.Actions != nil {
			f0 := []*svcapitypes.Action{}
			for _, f0iter := range elem.Actions {
				f0elem := &svcapitypes.Action{}
				if f0iter.AuthenticateCognitoConfig != nil {
					f0elemf0 := &svcapitypes.AuthenticateCognitoActionConfig{}
					if f0iter.AuthenticateCognitoConfig.AuthenticationRequestExtraParams != nil {
						f0elemf0f0 := map[string]*string{}
						for f0elemf0f0key, f0elemf0f0valiter := range f0iter.AuthenticateCognitoConfig.AuthenticationRequestExtraParams {
							var f0elemf0f0val string
							f0elemf0f0val = *f0elemf0f0valiter
							f0elemf0f0[f0elemf0f0key] = &f0elemf0f0val
						}
						f0elemf0.AuthenticationRequestExtraParams = f0elemf0f0
					}
					if f0iter.AuthenticateCognitoConfig.OnUnauthenticatedRequest != nil {
						f0elemf0.OnUnauthenticatedRequest = f0iter.AuthenticateCognitoConfig.OnUnauthenticatedRequest
					}
					if f0iter.AuthenticateCognitoConfig.Scope != nil {
						f0elemf0.Scope = f0iter.AuthenticateCognitoConfig.Scope
					}
					if f0iter.AuthenticateCognitoConfig.SessionCookieName != nil {
						f0elemf0.SessionCookieName = f0iter.AuthenticateCognitoConfig.SessionCookieName
					}
					if f0iter.AuthenticateCognitoConfig.SessionTimeout != nil {
						f0elemf0.SessionTimeout = f0iter.AuthenticateCognitoConfig.SessionTimeout
					}
					if f0iter.AuthenticateCognitoConfig.UserPoolArn != nil {
						f0elemf0.UserPoolARN = f0iter.AuthenticateCognitoConfig.UserPoolArn
					}
					if f0iter.AuthenticateCognitoConfig.UserPoolClientId != nil {
						f0elemf0.UserPoolClientID = f0iter.AuthenticateCognitoConfig.UserPoolClientId
					}
					if f0iter.AuthenticateCognitoConfig.UserPoolDomain != nil {
						f0elemf0.UserPoolDomain = f0iter.AuthenticateCognitoConfig.UserPoolDomain
					}
					f0elem.AuthenticateCognitoConfig = f0elemf0
				}
				if f0iter.AuthenticateOidcConfig != nil {
					f0elemf1 := &svcapitypes.AuthenticateOIDCActionConfig{}
					if f0iter.AuthenticateOidcConfig.AuthenticationRequestExtraParams != nil {
						f0elemf1f0 := map[string]*string{}
						for f0elemf1f0key, f0elemf1f0valiter := range f0iter.AuthenticateOidcConfig.AuthenticationRequestExtraParams {
							var f0elemf1f0val string
							f0elemf1f0val = *f0elemf1f0valiter
							f0elemf1f0[f0elemf1f0key] = &f0elemf1f0val
						}
						f0elemf1.AuthenticationRequestExtraParams = f0elemf1f0
					}
					if f0iter.AuthenticateOidcConfig.AuthorizationEndpoint != nil {
						f0elemf1.AuthorizationEndpoint = f0iter.AuthenticateOidcConfig.AuthorizationEndpoint
					}
					if f0iter.AuthenticateOidcConfig.ClientId != nil {
						f0elemf1.ClientID = f0iter.AuthenticateOidcConfig.ClientId
					}
					if f0iter.AuthenticateOidcConfig.ClientSecret != nil {
						f0elemf1.ClientSecret = f0iter.AuthenticateOidcConfig.ClientSecret
					}
					if f0iter.AuthenticateOidcConfig.Issuer != nil {
						f0elemf1.Issuer = f0iter.AuthenticateOidcConfig.Issuer
					}
					if f0iter.AuthenticateOidcConfig.OnUnauthenticatedRequest != nil {
						f0elemf1.OnUnauthenticatedRequest = f0iter.AuthenticateOidcConfig.OnUnauthenticatedRequest
					}
					if f0iter.AuthenticateOidcConfig.Scope != nil {
						f0elemf1.Scope = f0iter.AuthenticateOidcConfig.Scope
					}
					if f0iter.AuthenticateOidcConfig.SessionCookieName != nil {
						f0elemf1.SessionCookieName = f0iter.AuthenticateOidcConfig.SessionCookieName
					}
					if f0iter.AuthenticateOidcConfig.SessionTimeout != nil {
						f0elemf1.SessionTimeout = f0iter.AuthenticateOidcConfig.SessionTimeout
					}
					if f0iter.AuthenticateOidcConfig.TokenEndpoint != nil {
						f0elemf1.TokenEndpoint = f0iter.AuthenticateOidcConfig.TokenEndpoint
					}
					if f0iter.AuthenticateOidcConfig.UseExistingClientSecret != nil {
						f0elemf1.UseExistingClientSecret = f0iter.AuthenticateOidcConfig.UseExistingClientSecret
					}
					if f0iter.AuthenticateOidcConfig.UserInfoEndpoint != nil {
						f0elemf1.UserInfoEndpoint = f0iter.AuthenticateOidcConfig.UserInfoEndpoint
					}
					f0elem.AuthenticateOIDCConfig = f0elemf1
				}
				if f0iter.FixedResponseConfig != nil {
					f0elemf2 := &svcapitypes.FixedResponseActionConfig{}
					if f0iter.FixedResponseConfig.ContentType != nil {
						f0elemf2.ContentType = f0iter.FixedResponseConfig.ContentType
					}
					if f0iter.FixedResponseConfig.MessageBody != nil {
						f0elemf2.MessageBody = f0iter.FixedResponseConfig.MessageBody
					}
					if f0iter.FixedResponseConfig.StatusCode != nil {
						f0elemf2.StatusCode = f0iter.FixedResponseConfig.StatusCode
					}
					f0elem.FixedResponseConfig = f0elemf2
				}
				if f0iter.ForwardConfig != nil {
					f0elemf3 := &svcapitypes.ForwardActionConfig{}
					if f0iter.ForwardConfig.TargetGroupStickinessConfig != nil {
						f0elemf3f0 := &svcapitypes.TargetGroupStickinessConfig{}
						if f0iter.ForwardConfig.TargetGroupStickinessConfig.DurationSeconds != nil {
							f0elemf3f0.DurationSeconds = f0iter.ForwardConfig.TargetGroupStickinessConfig.DurationSeconds
						}
						if f0iter.ForwardConfig.TargetGroupStickinessConfig.Enabled != nil {
							f0elemf3f0.Enabled = f0iter.ForwardConfig.TargetGroupStickinessConfig.Enabled
						}
						f0elemf3.TargetGroupStickinessConfig = f0elemf3f0
					}
					if f0iter.ForwardConfig.TargetGroups != nil {
						f0elemf3f1 := []*svcapitypes.TargetGroupTuple{}
						for _, f0elemf3f1iter := range f0iter.ForwardConfig.TargetGroups {
							f0elemf3f1elem := &svcapitypes.TargetGroupTuple{}
							if f0elemf3f1iter.TargetGroupArn != nil {
								f0elemf3f1elem.TargetGroupARN = f0elemf3f1iter.TargetGroupArn
							}
							if f0elemf3f1iter.Weight != nil {
								f0elemf3f1elem.Weight = f0elemf3f1iter.Weight
							}
							f0elemf3f1 = append(f0elemf3f1, f0elemf3f1elem)
						}
						f0elemf3.TargetGroups = f0elemf3f1
					}
					f0elem.ForwardConfig = f0elemf3
				}
				if f0iter.Order != nil {
					f0elem.Order = f0iter.Order
				}
				if f0iter.RedirectConfig != nil {
					f0elemf5 := &svcapitypes.RedirectActionConfig{}
					if f0iter.RedirectConfig.Host != nil {
						f0elemf5.Host = f0iter.RedirectConfig.Host
					}
					if f0iter.RedirectConfig.Path != nil {
						f0elemf5.Path = f0iter.RedirectConfig.Path
					}
					if f0iter.RedirectConfig.Port != nil {
						f0elemf5.Port = f0iter.RedirectConfig.Port
					}
					if f0iter.RedirectConfig.Protocol != nil {
						f0elemf5.Protocol = f0iter.RedirectConfig.Protocol
					}
					if f0iter.RedirectConfig.Query != nil {
						f0elemf5.Query = f0iter.RedirectConfig.Query
					}
					if f0iter.RedirectConfig.StatusCode != nil {
						f0elemf5.StatusCode = f0iter.RedirectConfig.StatusCode
					}
					f0elem.RedirectConfig = f0elemf5
				}
				if f0iter.TargetGroupArn != nil {
					f0elem.TargetGroupARN = f0iter.TargetGroupArn
				}
				if f0iter.Type != nil {
					f0elem.Type = f0iter.Type
				}
				f0 = append(f0, f0elem)
			}
			ko.Spec.Actions = f0
		} else {
			ko.Spec.Actions = nil
		}
		if elem.Conditions != nil {
			f1 := []*svcapitypes.RuleCondition{}
			for _, f1iter := range elem.Conditions {
				f1elem := &svcapitypes.RuleCondition{}
				if f1iter.Field != nil {
					f1elem.Field = f1iter.Field
				}
				if f1iter.HostHeaderConfig != nil {
					f1elemf1 := &svcapitypes.HostHeaderConditionConfig{}
					if f1iter.HostHeaderConfig.Values != nil {
						f1elemf1f0 := []*string{}
						for _, f1elemf1f0iter := range f1iter.HostHeaderConfig.Values {
							var f1elemf1f0elem string
							f1elemf1f0elem = *f1elemf1f0iter
							f1elemf1f0 = append(f1elemf1f0, &f1elemf1f0elem)
						}
						f1elemf1.Values = f1elemf1f0
					}
					f1elem.HostHeaderConfig = f1elemf1
				}
				if f1iter.HttpHeaderConfig != nil {
					f1elemf2 := &svcapitypes.HTTPHeaderConditionConfig{}
					if f1iter.HttpHeaderConfig.HttpHeaderName != nil {
						f1elemf2.HTTPHeaderName = f1iter.HttpHeaderConfig.HttpHeaderName
					}
					if f1iter.HttpHeaderConfig.Values != nil {
						f1elemf2f1 := []*string{}
						for _, f1elemf2f1iter := range f1iter.HttpHeaderConfig.Values {
							var f1elemf2f1elem string
							f1elemf2f1elem = *f1elemf2f1iter
							f1elemf2f1 = append(f1elemf2f1, &f1elemf2f1elem)
						}
						f1elemf2.Values = f1elemf2f1
					}
					f1elem.HTTPHeaderConfig = f1elemf2
				}
				if f1iter.HttpRequestMethodConfig != nil {
					f1elemf3 := &svcapitypes.HTTPRequestMethodConditionConfig{}
					if f1iter.HttpRequestMethodConfig.Values != nil {
						f1elemf3f0 := []*string{}
						for _, f1elemf3f0iter := range f1iter.HttpRequestMethodConfig.Values {
							var f1elemf3f0elem string
							f1elemf3f0elem = *f1elemf3f0iter
							f1elemf3f0 = append(f1elemf3f0, &f1elemf3f0elem)
						}
						f1elemf3.Values = f1elemf3f0
					}
					f1elem.HTTPRequestMethodConfig = f1elemf3
				}
				if f1iter.PathPatternConfig != nil {
					f1elemf4 := &svcapitypes.PathPatternConditionConfig{}
					if f1iter.PathPatternConfig.Values != nil {
						f1elemf4f0 := []*string{}
						for _, f1elemf4f0iter := range f1iter.PathPatternConfig.Values {
							var f1elemf4f0elem string
							f1elemf4f0elem = *f1elemf4f0iter
							f1elemf4f0 = append(f1elemf4f0, &f1elemf4f0elem)
						}
						f1elemf4.Values = f1elemf4f0
					}
					f1elem.PathPatternConfig = f1elemf4
				}
				if f1iter.QueryStringConfig != nil {
					f1elemf5 := &svcapitypes.QueryStringConditionConfig{}
					if f1iter.QueryStringConfig.Values != nil {
						f1elemf5f0 := []*svcapitypes.QueryStringKeyValuePair{}
						for _, f1elemf5f0iter := range f1iter.QueryStringConfig.Values {
							f1elemf5f0elem := &svcapitypes.QueryStringKeyValuePair{}
							if f1elemf5f0iter.Key != nil {
								f1elemf5f0elem.Key = f1elemf5f0iter.Key
							}
							if f1elemf5f0iter.Value != nil {
								f1elemf5f0elem.Value = f1elemf5f0iter.Value
							}
							f1elemf5f0 = append(f1elemf5f0, f1elemf5f0elem)
						}
						f1elemf5.Values = f1elemf5f0
					}
					f1elem.QueryStringConfig = f1elemf5
				}
				if f1iter.SourceIpConfig != nil {
					f1elemf6 := &svcapitypes.SourceIPConditionConfig{}
					if f1iter.SourceIpConfig.Values != nil {
						f1elemf6f0 := []*string{}
						for _, f1elemf6f0iter := range f1iter.SourceIpConfig.Values {
							var f1elemf6f0elem string
							f1elemf6f0elem = *f1elemf6f0iter
							f1elemf6f0 = append(f1elemf6f0, &f1elemf6f0elem)
						}
						f1elemf6.Values = f1elemf6f0
					}
					f1elem.SourceIPConfig = f1elemf6
				}
				if f1iter.Values != nil {
					f1elemf7 := []*string{}
					for _, f1elemf7iter := range f1iter.Values {
						var f1elemf7elem string
						f1elemf7elem = *f1elemf7iter
						f1elemf7 = append(f1elemf7, &f1elemf7elem)
					}
					f1elem.Values = f1elemf7
				}
				f1 = append(f1, f1elem)
			}
			ko.Spec.Conditions = f1
		} else {
			ko.Spec.Conditions = nil
		}
		if elem.IsDefault != nil {
			ko.Status.IsDefault = elem.IsDefault
		} else {
			ko.Status.IsDefault = nil
		}
		if elem.RuleArn != nil {
			if ko.Status.ACKResourceMetadata == nil {
				ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
			}
			tmpARN := ackv1alpha1.AWSResourceName(*elem.RuleArn)
			ko.Status.ACKResourceMetadata.ARN = &tmpARN
		}
		found = true
		break
	}
	if !found {
		return nil, ackerr.NotFound
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	ctx context.Context,
	r *resource,
	delta *ackcompare.Delta,
) (*svcsdk.ModifyRuleInput, error) {
	res := &svcsdk.ModifyRuleInput{}

	if r.ko.Spec.Actions != nil {
		f0 := []*svcsdk.Action{}
		for _, f0iter := range r.ko.Spec.Actions {
			f0elem := &svcsdk.Action{}
			if f0iter.AuthenticateCognitoConfig != nil {
				f0elemf0 := &svcsdk.AuthenticateCognitoActionConfig{}
				if f0iter.AuthenticateCognitoConfig.AuthenticationRequestExtraParams != nil {
					f0elemf0f0 := map[string]*string{}
					for f0elemf0f0key, f0elemf0f0valiter := range f0iter.AuthenticateCognitoConfig.AuthenticationRequestExtraParams {
						var f0elemf0f0val string
						f0elemf0f0val = *f0elemf0f0valiter
						f0elemf0f0[f0elemf0f0key] = &f0elemf0f0val
					}
					f0elemf0.SetAuthenticationRequestExtraParams(f0elemf0f0)
				}
				if f0iter.AuthenticateCognitoConfig.OnUnauthenticatedRequest != nil {
					f0elemf0.SetOnUnauthenticatedRequest(*f0iter.AuthenticateCognitoConfig.OnUnauthenticatedRequest)
				}
				if f0iter.AuthenticateCognitoConfig.Scope != nil {
					f0elemf0.SetScope(*f0iter.AuthenticateCognitoConfig.Scope)
				}
				if f0iter.AuthenticateCognitoConfig.SessionCookieName != nil {
					f0elemf0.SetSessionCookieName(*f0iter.AuthenticateCognitoConfig.SessionCookieName)
				}
				if f0iter.AuthenticateCognitoConfig.SessionTimeout != nil {
					f0elemf0.SetSessionTimeout(*f0iter.AuthenticateCognitoConfig.SessionTimeout)
				}
				if f0iter.AuthenticateCognitoConfig.UserPoolARN != nil {
					f0elemf0.SetUserPoolArn(*f0iter.AuthenticateCognitoConfig.UserPoolARN)
				}
				if f0iter.AuthenticateCognitoConfig.UserPoolClientID != nil {
					f0elemf0.SetUserPoolClientId(*f0iter.AuthenticateCognitoConfig.UserPoolClientID)
				}
				if f0iter.AuthenticateCognitoConfig.UserPoolDomain != nil {
					f0elemf0.SetUserPoolDomain(*f0iter.AuthenticateCognitoConfig.UserPoolDomain)
				}
				f0elem.SetAuthenticateCognitoConfig(f0elemf0)
			}
			if f0iter.AuthenticateOIDCConfig != nil {
				f0elemf1 := &svcsdk.AuthenticateOidcActionConfig{}
				if f0iter.AuthenticateOIDCConfig.AuthenticationRequestExtraParams != nil {
					f0elemf1f0 := map[string]*string{}
					for f0elemf1f0key, f0elemf1f0valiter := range f0iter.AuthenticateOIDCConfig.AuthenticationRequestExtraParams {
						var f0elemf1f0val string
						f0elemf1f0val = *f0elemf1f0valiter
						f0elemf1f0[f0elemf1f0key] = &f0elemf1f0val
					}
					f0elemf1.SetAuthenticationRequestExtraParams(f0elemf1f0)
				}
				if f0iter.AuthenticateOIDCConfig.AuthorizationEndpoint != nil {
					f0elemf1.SetAuthorizationEndpoint(*f0iter.AuthenticateOIDCConfig.AuthorizationEndpoint)
				}
				if f0iter.AuthenticateOIDCConfig.ClientID != nil {
					f0elemf1.SetClientId(*f0iter.AuthenticateOIDCConfig.ClientID)
				}
				if f0iter.AuthenticateOIDCConfig.ClientSecret != nil {
					f0elemf1.SetClientSecret(*f0iter.AuthenticateOIDCConfig.ClientSecret)
				}
				if f0iter.AuthenticateOIDCConfig.Issuer != nil {
					f0elemf1.SetIssuer(*f0iter.AuthenticateOIDCConfig.Issuer)
				}
				if f0iter.AuthenticateOIDCConfig.OnUnauthenticatedRequest != nil {
					f0elemf1.SetOnUnauthenticatedRequest(*f0iter.AuthenticateOIDCConfig.OnUnauthenticatedRequest)
				}
				if f0iter.AuthenticateOIDCConfig.Scope != nil {
					f0elemf1.SetScope(*f0iter.AuthenticateOIDCConfig.Scope)
				}
				if f0iter.AuthenticateOIDCConfig.SessionCookieName != nil {
					f0elemf1.SetSessionCookieName(*f0iter.AuthenticateOIDCConfig.SessionCookieName)
				}
				if f0iter.AuthenticateOIDCConfig.SessionTimeout != nil {
					f0elemf1.SetSessionTimeout(*f0iter.AuthenticateOIDCConfig.SessionTimeout)
				}
				if f0iter.AuthenticateOIDCConfig.TokenEndpoint != nil {
					f0elemf1.SetTokenEndpoint(*f0iter.AuthenticateOIDCConfig.TokenEndpoint)
				}
				if f0iter.AuthenticateOIDCConfig.UseExistingClientSecret != nil {
					f0elemf1.SetUseExistingClientSecret(*f0iter.AuthenticateOIDCConfig.UseExistingClientSecret)
				}
				if f0iter.AuthenticateOIDCConfig.UserInfoEndpoint != nil {
					f0elemf1.SetUserInfoEndpoint(*f0iter.AuthenticateOIDCConfig.UserInfoEndpoint)
				}
				f0elem.SetAuthenticateOidcConfig(f0elemf1)
			}
			if f0iter.FixedResponseConfig != nil {
				f0elemf2 := &svcsdk.FixedResponseActionConfig{}
				if f0iter.FixedResponseConfig.ContentType != nil {
					f0elemf2.SetContentType(*f0iter.FixedResponseConfig.ContentType)
				}
				if f0iter.FixedResponseConfig.MessageBody != nil {
					f0elemf2.SetMessageBody(*f0iter.FixedResponseConfig.MessageBody)
				}
				if f0iter.FixedResponseConfig.StatusCode != nil {
					f0elemf2.SetStatusCode(*f0iter.FixedResponseConfig.StatusCode)
				}
				f0elem.SetFixedResponseConfig(f0elemf2)
			}
			if f0iter.ForwardConfig != nil {
				f0elemf3 := &svcsdk.ForwardActionConfig{}
				if f0iter.ForwardConfig.TargetGroupStickinessConfig != nil {
					f0elemf3f0 := &svcsdk.TargetGroupStickinessConfig{}
					if f0iter.ForwardConfig.TargetGroupStickinessConfig.DurationSeconds != nil {
						f0elemf3f0.SetDurationSeconds(*f0iter.ForwardConfig.TargetGroupStickinessConfig.DurationSeconds)
					}
					if f0iter.ForwardConfig.TargetGroupStickinessConfig.Enabled != nil {
						f0elemf3f0.SetEnabled(*f0iter.ForwardConfig.TargetGroupStickinessConfig.Enabled)
					}
					f0elemf3.SetTargetGroupStickinessConfig(f0elemf3f0)
				}
				if f0iter.ForwardConfig.TargetGroups != nil {
					f0elemf3f1 := []*svcsdk.TargetGroupTuple{}
					for _, f0elemf3f1iter := range f0iter.ForwardConfig.TargetGroups {
						f0elemf3f1elem := &svcsdk.TargetGroupTuple{}
						if f0elemf3f1iter.TargetGroupARN != nil {
							f0elemf3f1elem.SetTargetGroupArn(*f0elemf3f1iter.TargetGroupARN)
						}
						if f0elemf3f1iter.Weight != nil {
							f0elemf3f1elem.SetWeight(*f0elemf3f1iter.Weight)
						}
						f0elemf3f1 = append(f0elemf3f1, f0elemf3f1elem)
					}
					f0elemf3.SetTargetGroups(f0elemf3f1)
				}
				f0elem.SetForwardConfig(f0elemf3)
			}
			if f0iter.Order != nil {
				f0elem.SetOrder(*f0iter.Order)
			}
			if f0iter.RedirectConfig != nil {
				f0elemf5 := &svcsdk.RedirectActionConfig{}
				if f0iter.RedirectConfig.Host != nil {
					f0elemf5.SetHost(*f0iter.RedirectConfig.Host)
				}
				if f0iter.RedirectConfig.Path != nil {
					f0elemf5.SetPath(*f0iter.RedirectConfig.Path)
				}
				if f0iter.RedirectConfig.Port != nil {
					f0elemf5.SetPort(*f0iter.RedirectConfig.Port)
				}
				if f0iter.RedirectConfig.Protocol != nil {
					f0elemf5.SetProtocol(*f0iter.RedirectConfig.Protocol)
				}
				if f0iter.RedirectConfig.Query != nil {
					f0elemf5.SetQuery(*f0iter.RedirectConfig.Query)
				}
				if f0iter.RedirectConfig.StatusCode != nil {
					f0elemf5.SetStatusCode(*f0iter.RedirectConfig.StatusCode)
				}
				f0elem.SetRedirectConfig(f0elemf5)
			}
			if f0iter.TargetGroupARN != nil {
				f0elem.SetTargetGroupArn(*f0iter.TargetGroupARN)
			}
			if f0iter.Type != nil {
				f0elem.SetType(*f0iter.Type)
			}
			f0 = append(f0, f0elem)
		}
		res.SetActions(f0)
	}
	if r.ko.Spec.Conditions != nil {
		f1 := []*svcsdk.RuleCondition{}
		for _, f1iter := range r.ko.Spec.Conditions {
			f1elem := &svcsdk.RuleCondition{}
			if f1iter.Field != nil {
				f1elem.SetField(*f1iter.Field)
			}
			if f1iter.HostHeaderConfig != nil {
				f1elemf1 := &svcsdk.HostHeaderConditionConfig{}
				if f1iter.HostHeaderConfig.Values != nil {
					f1elemf1f0 := []*string{}
					for _, f1elemf1f0iter := range f1iter.HostHeaderConfig.Values {
						var f1elemf1f0elem string
						f1elemf1f0elem = *f1elemf1f0iter
						f1elemf1f0 = append(f1elemf1f0, &f1elemf1f0elem)
					}
					f1elemf1.SetValues(f1elemf1f0)
				}
				f1elem.SetHostHeaderConfig(f1elemf1)
			}
			if f1iter.HTTPHeaderConfig != nil {
				f1elemf2 := &svcsdk.HttpHeaderConditionConfig{}
				if f1iter.HTTPHeaderConfig.HTTPHeaderName != nil {
					f1elemf2.SetHttpHeaderName(*f1iter.HTTPHeaderConfig.HTTPHeaderName)
				}
				if f1iter.HTTPHeaderConfig.Values != nil {
					f1elemf2f1 := []*string{}
					for _, f1elemf2f1iter := range f1iter.HTTPHeaderConfig.Values {
						var f1elemf2f1elem string
						f1elemf2f1elem = *f1elemf2f1iter
						f1elemf2f1 = append(f1elemf2f1, &f1elemf2f1elem)
					}
					f1elemf2.SetValues(f1elemf2f1)
				}
				f1elem.SetHttpHeaderConfig(f1elemf2)
			}
			if f1iter.HTTPRequestMethodConfig != nil {
				f1elemf3 := &svcsdk.HttpRequestMethodConditionConfig{}
				if f1iter.HTTPRequestMethodConfig.Values != nil {
					f1elemf3f0 := []*string{}
					for _, f1elemf3f0iter := range f1iter.HTTPRequestMethodConfig.Values {
						var f1elemf3f0elem string
						f1elemf3f0elem = *f1elemf3f0iter
						f1elemf3f0 = append(f1elemf3f0, &f1elemf3f0elem)
					}
					f1elemf3.SetValues(f1elemf3f0)
				}
				f1elem.SetHttpRequestMethodConfig(f1elemf3)
			}
			if f1iter.PathPatternConfig != nil {
				f1elemf4 := &svcsdk.PathPatternConditionConfig{}
				if f1iter.PathPatternConfig.Values != nil {
					f1elemf4f0 := []*string{}
					for _, f1elemf4f0iter := range f1iter.PathPatternConfig.Values {
						var f1elemf4f0elem string
						f1elemf4f0elem = *f1elemf4f0iter
						f1elemf4f0 = append(f1elemf4f0, &f1elemf4f0elem)
					}
					f1elemf4.SetValues(f1elemf4f0)
				}
				f1elem.SetPathPatternConfig(f1elemf4)
			}
			if f1iter.QueryStringConfig != nil {
				f1elemf5 := &svcsdk.QueryStringConditionConfig{}
				if f1iter.QueryStringConfig.Values != nil {
					f1elemf5f0 := []*svcsdk.QueryStringKeyValuePair{}
					for _, f1elemf5f0iter := range f1iter.QueryStringConfig.Values {
						f1elemf5f0elem := &svcsdk.QueryStringKeyValuePair{}
						if f1elemf5f0iter.Key != nil {
							f1elemf5f0elem.SetKey(*f1elemf5f0iter.Key)
						}
						if f1elemf5f0iter.Value != nil {
							f1elemf5f0elem.SetValue(*f1elemf5f0iter.Value)
						}
						f1elemf5f0 = append(f1elemf5f0, f1elemf5f0elem)
					}
					f1elemf5.SetValues(f1elemf5f0)
				}
				f1elem.SetQueryStringConfig(f1elemf5)
			}
			if f1iter.SourceIPConfig != nil {
				f1elemf6 := &svcsdk.SourceIpConditionConfig{}
				if f1iter.SourceIPConfig.Values != nil {
					f1elemf6f0 := []*string{}
					for _, f1elemf6f0iter := range f1iter.SourceIPConfig.Values {
						var f1elemf6f0elem string
						f1elemf6f0elem = *f1elemf6f0iter
						f1elemf6f0 = append(f1elemf6f0, &f1elemf6f0elem)
					}
					f1elemf6.SetValues(f1elemf6f0)
				}
				f1elem.SetSourceIpConfig(f1elemf6)
			}
			if f1iter.Values != nil {
				f1elemf7 := []*string{}
				for _, f1elemf7iter := range f1iter.Values {
					var f1elemf7elem string
					f1elemf7elem = *f1elemf7iter
					f1elemf7 = append(f1elemf7, &f1elemf7elem)
				}
				f1elem.SetValues(f1elemf7)
			}
			f1 = append(f1, f1elem)
		}
		res.SetConditions(f1)
	}
	if r.ko.Status.ACKResourceMetadata != nil && r.ko.Status.ACKResourceMetadata.ARN != nil {
		res.SetRuleArn(string(*r.ko.Status.ACKResourceMetadata.ARN))
	}

	return res, nil
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer func() {
		exit(err)
	}()
	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.DeleteRuleOutput
	_ = resp
	resp, err = rm.sdkapi.DeleteRuleWithContext(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DeleteRule", err)
	return nil, err
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteRuleInput, error) {
	res := &svcsdk.DeleteRuleInput{}

	if r.ko.Status.ACKResourceMetadata != nil && r.ko.Status.ACKResourceMetadata.ARN != nil {
		res.SetRuleArn(string(*r.ko.Status.ACKResourceMetadata.ARN))
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.Rule,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.Region == nil {
		ko.Status.ACKResourceMetadata.Region = &rm.awsRegion
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}
	var termError *ackerr.TerminalError
	if rm.terminalAWSError(err) || err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		var errorMessage = ""
		if err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
			errorMessage = err.Error()
		} else {
			awsErr, _ := ackerr.AWSError(err)
			errorMessage = awsErr.Error()
		}
		terminalCondition.Status = corev1.ConditionTrue
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Error()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	// Required to avoid the "declared but not used" error in the default case
	_ = syncCondition
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	if err == nil {
		return false
	}
	awsErr, ok := ackerr.AWSError(err)
	if !ok {
		return false
	}
	switch awsErr.Code() {
	case "InvalidConfigurationRequest",
		"IncompatibleProtocols",
		"UnsupportedProtocol",
		"InvalidLoadBalancerAction":
		return true
	default:
		return false
	}
}
