// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package listener

import (
	"bytes"
	"reflect"

	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	acktags "github.com/aws-controllers-k8s/runtime/pkg/tags"
)

// Hack to avoid import errors during build...
var (
	_ = &bytes.Buffer{}
	_ = &reflect.Method{}
	_ = &acktags.Tags{}
)

// newResourceDelta returns a new `ackcompare.Delta` used to compare two
// resources
func newResourceDelta(
	a *resource,
	b *resource,
) *ackcompare.Delta {
	delta := ackcompare.NewDelta()
	if (a == nil && b != nil) ||
		(a != nil && b == nil) {
		delta.Add("", a, b)
		return delta
	}

	if len(a.ko.Spec.AlpnPolicy) != len(b.ko.Spec.AlpnPolicy) {
		delta.Add("Spec.AlpnPolicy", a.ko.Spec.AlpnPolicy, b.ko.Spec.AlpnPolicy)
	} else if len(a.ko.Spec.AlpnPolicy) > 0 {
		if !ackcompare.SliceStringPEqual(a.ko.Spec.AlpnPolicy, b.ko.Spec.AlpnPolicy) {
			delta.Add("Spec.AlpnPolicy", a.ko.Spec.AlpnPolicy, b.ko.Spec.AlpnPolicy)
		}
	}
	if len(a.ko.Spec.Certificates) != len(b.ko.Spec.Certificates) {
		delta.Add("Spec.Certificates", a.ko.Spec.Certificates, b.ko.Spec.Certificates)
	} else if len(a.ko.Spec.Certificates) > 0 {
		if !reflect.DeepEqual(a.ko.Spec.Certificates, b.ko.Spec.Certificates) {
			delta.Add("Spec.Certificates", a.ko.Spec.Certificates, b.ko.Spec.Certificates)
		}
	}
	if len(a.ko.Spec.DefaultActions) != len(b.ko.Spec.DefaultActions) {
		delta.Add("Spec.DefaultActions", a.ko.Spec.DefaultActions, b.ko.Spec.DefaultActions)
	} else if len(a.ko.Spec.DefaultActions) > 0 {
		if !reflect.DeepEqual(a.ko.Spec.DefaultActions, b.ko.Spec.DefaultActions) {
			delta.Add("Spec.DefaultActions", a.ko.Spec.DefaultActions, b.ko.Spec.DefaultActions)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.LoadBalancerARN, b.ko.Spec.LoadBalancerARN) {
		delta.Add("Spec.LoadBalancerARN", a.ko.Spec.LoadBalancerARN, b.ko.Spec.LoadBalancerARN)
	} else if a.ko.Spec.LoadBalancerARN != nil && b.ko.Spec.LoadBalancerARN != nil {
		if *a.ko.Spec.LoadBalancerARN != *b.ko.Spec.LoadBalancerARN {
			delta.Add("Spec.LoadBalancerARN", a.ko.Spec.LoadBalancerARN, b.ko.Spec.LoadBalancerARN)
		}
	}
	if !reflect.DeepEqual(a.ko.Spec.LoadBalancerRef, b.ko.Spec.LoadBalancerRef) {
		delta.Add("Spec.LoadBalancerRef", a.ko.Spec.LoadBalancerRef, b.ko.Spec.LoadBalancerRef)
	}
	if ackcompare.HasNilDifference(a.ko.Spec.MutualAuthentication, b.ko.Spec.MutualAuthentication) {
		delta.Add("Spec.MutualAuthentication", a.ko.Spec.MutualAuthentication, b.ko.Spec.MutualAuthentication)
	} else if a.ko.Spec.MutualAuthentication != nil && b.ko.Spec.MutualAuthentication != nil {
		if ackcompare.HasNilDifference(a.ko.Spec.MutualAuthentication.IgnoreClientCertificateExpiry, b.ko.Spec.MutualAuthentication.IgnoreClientCertificateExpiry) {
			delta.Add("Spec.MutualAuthentication.IgnoreClientCertificateExpiry", a.ko.Spec.MutualAuthentication.IgnoreClientCertificateExpiry, b.ko.Spec.MutualAuthentication.IgnoreClientCertificateExpiry)
		} else if a.ko.Spec.MutualAuthentication.IgnoreClientCertificateExpiry != nil && b.ko.Spec.MutualAuthentication.IgnoreClientCertificateExpiry != nil {
			if *a.ko.Spec.MutualAuthentication.IgnoreClientCertificateExpiry != *b.ko.Spec.MutualAuthentication.IgnoreClientCertificateExpiry {
				delta.Add("Spec.MutualAuthentication.IgnoreClientCertificateExpiry", a.ko.Spec.MutualAuthentication.IgnoreClientCertificateExpiry, b.ko.Spec.MutualAuthentication.IgnoreClientCertificateExpiry)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.MutualAuthentication.Mode, b.ko.Spec.MutualAuthentication.Mode) {
			delta.Add("Spec.MutualAuthentication.Mode", a.ko.Spec.MutualAuthentication.Mode, b.ko.Spec.MutualAuthentication.Mode)
		} else if a.ko.Spec.MutualAuthentication.Mode != nil && b.ko.Spec.MutualAuthentication.Mode != nil {
			if *a.ko.Spec.MutualAuthentication.Mode != *b.ko.Spec.MutualAuthentication.Mode {
				delta.Add("Spec.MutualAuthentication.Mode", a.ko.Spec.MutualAuthentication.Mode, b.ko.Spec.MutualAuthentication.Mode)
			}
		}
		if ackcompare.HasNilDifference(a.ko.Spec.MutualAuthentication.TrustStoreARN, b.ko.Spec.MutualAuthentication.TrustStoreARN) {
			delta.Add("Spec.MutualAuthentication.TrustStoreARN", a.ko.Spec.MutualAuthentication.TrustStoreARN, b.ko.Spec.MutualAuthentication.TrustStoreARN)
		} else if a.ko.Spec.MutualAuthentication.TrustStoreARN != nil && b.ko.Spec.MutualAuthentication.TrustStoreARN != nil {
			if *a.ko.Spec.MutualAuthentication.TrustStoreARN != *b.ko.Spec.MutualAuthentication.TrustStoreARN {
				delta.Add("Spec.MutualAuthentication.TrustStoreARN", a.ko.Spec.MutualAuthentication.TrustStoreARN, b.ko.Spec.MutualAuthentication.TrustStoreARN)
			}
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.Port, b.ko.Spec.Port) {
		delta.Add("Spec.Port", a.ko.Spec.Port, b.ko.Spec.Port)
	} else if a.ko.Spec.Port != nil && b.ko.Spec.Port != nil {
		if *a.ko.Spec.Port != *b.ko.Spec.Port {
			delta.Add("Spec.Port", a.ko.Spec.Port, b.ko.Spec.Port)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.Protocol, b.ko.Spec.Protocol) {
		delta.Add("Spec.Protocol", a.ko.Spec.Protocol, b.ko.Spec.Protocol)
	} else if a.ko.Spec.Protocol != nil && b.ko.Spec.Protocol != nil {
		if *a.ko.Spec.Protocol != *b.ko.Spec.Protocol {
			delta.Add("Spec.Protocol", a.ko.Spec.Protocol, b.ko.Spec.Protocol)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.SSLPolicy, b.ko.Spec.SSLPolicy) {
		delta.Add("Spec.SSLPolicy", a.ko.Spec.SSLPolicy, b.ko.Spec.SSLPolicy)
	} else if a.ko.Spec.SSLPolicy != nil && b.ko.Spec.SSLPolicy != nil {
		if *a.ko.Spec.SSLPolicy != *b.ko.Spec.SSLPolicy {
			delta.Add("Spec.SSLPolicy", a.ko.Spec.SSLPolicy, b.ko.Spec.SSLPolicy)
		}
	}
	if len(a.ko.Spec.Tags) != len(b.ko.Spec.Tags) {
		delta.Add("Spec.Tags", a.ko.Spec.Tags, b.ko.Spec.Tags)
	} else if len(a.ko.Spec.Tags) > 0 {
		if !reflect.DeepEqual(a.ko.Spec.Tags, b.ko.Spec.Tags) {
			delta.Add("Spec.Tags", a.ko.Spec.Tags, b.ko.Spec.Tags)
		}
	}

	return delta
}
